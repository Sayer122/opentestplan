const bcrypt = require('bcrypt');
const { Pool } = require('pg');

const pool = new Pool({
    user: process.env.DB_USER,
    host: process.env.DB_HOST,
    database: process.env.DB_NAME,
    password: process.env.DB_PASSWORD,
    port: parseInt(process.env.DB_PORT, 10),
});

const createAdminUser = async () => {
    const username = 'admin';
    const password = process.env.ADMIN_PASSWORD;
    const role = 'admin';
    const state = 'active';

    try {
        const checkQuery = `SELECT username FROM users WHERE username = 'admin';`;
        const checkRes = await pool.query(checkQuery);

        if (checkRes.rowCount > 0) {
            console.log('Admin user already exists. Skipping creation.');
            return;
        }
        const saltRounds = 10;
        const hashedPassword = await bcrypt.hash(password, saltRounds);

        const insertQuery = `
            INSERT INTO users (username, email, password, role, state)
            VALUES ($1, $2, $3, $4, $5);
        `;
        const insertRes = await pool.query(insertQuery, [username, '', hashedPassword, role, state]);
        console.log('Admin user created successfully:', insertRes.rows[0]);
    } catch (err) {
        console.error('Failed to create admin user:', err.stack);
    } finally {
        await pool.end();
    }
};

createAdminUser();
