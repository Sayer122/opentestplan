import { NextResponse } from 'next/server';

export async function middleware(req) {
    const { pathname } = req.nextUrl;
    if (pathname.startsWith('/api/') || pathname.startsWith('/_next/static')) {
        return NextResponse.next();
    }
    const token = req.cookies.get('token');
    if (!token && !pathname.startsWith('/login')) {
        const url = req.nextUrl.clone();
        url.pathname = '/login';
        return NextResponse.redirect(url);
    }

    if (pathname.startsWith('/admin')) {
        if (!token) {
            const url = req.nextUrl.clone();
            url.pathname = '/login';
            return NextResponse.redirect;
        }
        try {
            const baseUrl = req.nextUrl.clone();
            baseUrl.pathname = '/api/auth/role';
            const verifyResponse = await fetch(baseUrl.toString(), {
                headers: {
                    'Cookie': `token=${token.value}`
                }
            });
            if (!verifyResponse.ok) {
                console.error(`Error from verifyRole: ${await verifyResponse.text()}`);
                throw new Error('Failed to verify role');
            }
            const data = await verifyResponse.json();
            if (data.role === 'admin') {
                return NextResponse.next();
            } else {
                const url = req.nextUrl.clone();
                url.pathname = '/';
                return NextResponse.redirect(url);
            }

        } catch (error) {
            const url = req.nextUrl.clone();
            url.pathname = '/login';
            return NextResponse.redirect(url);
        }
    }
    if (token && !pathname.startsWith('/login')) {
        const baseUrl = req.nextUrl.clone();
        baseUrl.pathname = '/api/auth/verify';
        const verifyResponse = await fetch(baseUrl.toString(), {
            headers: {
                'Cookie': `token=${token.value}`
            }
        });

        if (!verifyResponse.ok) {
            const url = req.nextUrl.clone();
            url.pathname = '/login';
            return NextResponse.redirect(url);
        }

        if (pathname.startsWith('/login')) {
            const url = req.nextUrl.clone();
            url.pathname = '/';
            return NextResponse.redirect(url);
        }
    }

    return NextResponse.next();
}
