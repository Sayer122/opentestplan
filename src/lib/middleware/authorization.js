import jwt from 'jsonwebtoken';
import pool from '../db';

export const standardAuthorization = async (req, res) => {
    try {
        const jwtToken = req.cookies.token;
        if (!jwtToken) {
            return res.status(403).json('Not authorized');
        }
        const payload = jwt.verify(jwtToken, process.env.JWT_SECRET);
        req.user_id = payload.user_id;
        return true;
    } catch (err) {
        console.error(err.message);
        return res.status(403).json('Not authorized');
    }
};

export const adminAuthorization = async (req, res) => {
    const isAuthorized = await standardAuthorization(req, res);
    if (!isAuthorized) return;

    const jwtToken = req.cookies.token;
    const decoded = jwt.decode(jwtToken);
    const user_id = decoded.user_id;

    if (!user_id) {
        res.status(401).json('Invalid token');
        return;
    }
    try {
        const user = await pool.query('SELECT role, state FROM users WHERE id = $1', [user_id]);
        if (user.rows.length === 0 || user.rows[0].state !== 'active') {
            res.status(401).json(user.rows.length === 0 ? 'Invalid token' : 'User is not active');
            return;
        }
        if (user.rows[0].role !== 'admin') {
            res.status(403).json('Access denied. Admin only.');
            return;
        }
        return true;
    } catch (error) {
        console.error(error);
        res.status(500).json('Server error');
    }
};

export const roleCheck = async (req, res) => {
    try {
        const jwtToken = req.cookies.token;
        if (!jwtToken) {
            return res.status(403).json('Not authorized');
        }
        const payload = jwt.verify(jwtToken, process.env.JWT_SECRET);
        const user_id = payload.user_id;
        const user_role = await pool.query('SELECT role FROM users WHERE id = $1', [user_id]);

        return user_role.rows[0].role;
    } catch (err) {
        console.error(err.message);
        return res.status(403).json('Not authorized');
    }
};
