import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import table from '../../styles/Table.module.css';
import form from '../../styles/Form.module.css';
import Header from '../../components/Header';

function AdminSettings() {
    const [users, setUsers] = useState([]);
    const [newUser, setNewUser] = useState({
        username: '',
        email: '',
        password: ''
    });
    const [hoveredRow, setHoveredRow] = useState(null);

    useEffect(() => {
        fetchUsers();
    }, []);

    const fetchUsers = () => {
        fetch('/api/settings/users', {
            credentials: 'include'
        })
            .then(response => response.json())
            .then(data => setUsers(data))
            .catch(err => console.error('Error fetching users:', err));
    };

    const handleInputChange = (e) => {
        setNewUser({ ...newUser, [e.target.name]: e.target.value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const response = await fetch('/api/settings/users', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(newUser),
                credentials: 'include'
            });
            const data = await response.json();
            if (response.ok) {
                setNewUser({ username: '', email: '', password: '' });
                fetchUsers();
                console.log('User created successfully:', data);
            } else {
                throw new Error(data.error || 'Failed to create user');
            }
        } catch (err) {
            console.error('Error creating user:', err);
        }
    };


    const updateRole = (userId, role) => {
        console.log(role);
        fetch(`/api/settings/users/${userId}/role`, {
            method: 'PATCH',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ role }),
        })
            .then(() => {
                fetch('/api/settings/users', {
                    credentials: 'include'
                })
                    .then(response => response.json())
                    .then(data => setUsers(data));
            });
    };
    const handleDelete = async (userId) => {
        if (!userId) {
            console.error('User ID is required');
            return;
        }
        fetch(`/api/settings/users/${userId}`, {
            method: 'DELETE',
            credentials: 'include'
        })
            .then(() => {
                fetch('/api/settings/users', {
                    credentials: 'include'
                })
                    .then(response => response.json())
                    .then(data => setUsers(data));
            }
            );
    };
    return (
        <>
            <Header/>
            <div style={{ marginLeft: '20px', marginRight: '20px' }}>
                <div className={form.form} style={{ marginLeft: '20px', marginRight: '20px', color: 'grey' }}>

                    <form className onSubmit={handleSubmit}>
                        <input
                            type="text"
                            name="username"
                            value={newUser.username}
                            onChange={handleInputChange}
                            placeholder="Username"
                            className={form.input}
                            required
                        />
                        <input
                            type="email"
                            name="email"
                            value={newUser.email}
                            onChange={handleInputChange}
                            placeholder="Email"
                            className={form.input}
                            required
                        />
                        <input
                            type="password"
                            name="password"
                            value={newUser.password}
                            onChange={handleInputChange}
                            placeholder="Password"
                            className={form.input}
                            required
                        />
                        <button type="submit" className={form.button}>Create User</button>
                    </form>
                </div>
                <table className={table.table}>
                    <thead>
                        <tr>
                            <th className={table.th}>Username</th>
                            <th className={table.th}>Email</th>
                            <th className={table.th}>Role</th>
                            <th className={table.th}>Created</th>
                            <th className={table.th}>Update Role</th>
                            <th className={table.th}>Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        {users.map((user) => {
                            return (
                                <tr
                                    key={user.id}
                                    onMouseEnter={() => setHoveredRow(user.id)}
                                    onMouseLeave={() => setHoveredRow(null)}
                                    className={hoveredRow === user.id ? table.hovered : ''}
                                >
                                    <td className={table.td}>{user.username}</td>
                                    <td className={table.td}>{user.email}</td>
                                    <td className={table.td}>{user.role}</td>
                                    <td className={table.td}>{user.created_at}</td>
                                    <td className={table.td}>
                                        <button onClick={() => updateRole(user.id,user.role === 'admin' ? 'standard' : 'admin')}>
                                            {
                                                user.role === 'admin' ? 'Make Standard' : 'Make Admin'
                                            }
                                        </button>
                                    </td>
                                    <td className={table.td}>
                                        <button onClick={() => handleDelete(user.id)}>Delete</button>
                                    </td>
                                </tr>
                            );
                        })}
                    </tbody>
                </table>
            </div>
        </>
    );
}

export default AdminSettings;
