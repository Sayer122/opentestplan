import Header from '../components/Header';
import { useState, useEffect } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import table from '../styles/Table.module.css';

function Dashboard() {
    const [dashboardData, setDashboardData] = useState([]);
    const [failedData, setFailedData] = useState([]);
    const [selectedRun, setSelectedRun] = useState(null);

    useEffect(() => {
        fetch('/api/dashboard', {
            credentials: 'include'
        })
            .then(response => response.json())
            .then(data => {
                const transformedData = data.map(item => ({
                    id: item.id,
                    name: `${item.name} (v${item.version})`,
                    Complete: item.complete_count,
                    Pending: item.pending_count,
                    Failed: item.failed_count
                }));
                setDashboardData(transformedData);
            })
            .catch(error => console.error('Failed to load dashboard data:', error));
        fetch('/api/dashboard/failed', {
            credentials: 'include'
        })
            .then(response => response.json())
            .then(data => {
                setFailedData(data);
            })
            .catch(error => console.error('Failed to load failed data:', error));

    }, []);
    useEffect(() => {
        if (selectedRun) {
            fetch(`/api/dashboard/failed/${selectedRun}`, {
                credentials: 'include'
            })
                .then(response => response.json())
                .then(data => setFailedData(data))
                .catch(error => console.error('Failed to fetch failed data:', error));
        } else {
            fetch('/api/dashboard/failed', {
                credentials: 'include'
            })
                .then(response => response.json())
                .then(data => setFailedData(data))
                .catch(error => console.error('Failed to fetch failed data:', error));
        }
    }, [selectedRun]);
    return (
        <>
            <Header />
            <div style={{ padding: '20px' }}>
                <ResponsiveContainer width="100%" height={400}>
                    <BarChart
                        data={dashboardData}
                        margin={{
                            top: 20, right: 30, left: 20, bottom: 5,
                        }}
                    >
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        <Bar dataKey="Complete" stackId="a" fill="#82ca9d" onClick={(data) => {
                            if (selectedRun === data.id) {
                                setSelectedRun(null);
                            } else {
                                setSelectedRun(data.id);
                            }
                        }} />
                        <Bar dataKey="Pending" stackId="a" fill="#2884d8" onClick={(data) => {
                            if (selectedRun === data.id) {
                                setSelectedRun(null);
                            } else {
                                setSelectedRun(data.id);
                            }
                        }} />
                        <Bar dataKey="Failed" stackId="a" fill="#ff6347" onClick={(data) => {
                            if (selectedRun === data.id) {
                                setSelectedRun(null);
                            } else {
                                setSelectedRun(data.id);
                            }
                        }} />


                    </BarChart>
                </ResponsiveContainer>
                <h2>Recent Failed Test Steps</h2>
                <table className={table.table}>
                    <thead>
                        <tr>
                            <th className={table.th}>Test Run</th>
                            <th className={table.th}>Test Plan</th>
                            <th className={table.th}>Test Step</th>
                            <th className={table.th}>Reported By</th>
                            <th className={table.th}>Comments</th>
                            <th className={table.th}>Ticket</th>
                            <th className={table.th}>Updated At</th>
                        </tr>
                    </thead>
                    <tbody>
                        {failedData.map(item => (
                            <tr key={item.id}>
                                <td className={table.td}>{item.name} v({item.version})</td>
                                <td className={table.td}>{item.test_plan_name}</td>
                                <td className={table.td}>{item.test_step_name}</td>
                                <td className={table.td}>{item.username}</td>
                                <td className={table.td}>{item.comments}</td>
                                <td className={table.td}>{item.ticket}</td>
                                <td className={table.td}>
                                    {new Date(item.updated_at).toLocaleString()}
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </>
    );
}

export default Dashboard;
