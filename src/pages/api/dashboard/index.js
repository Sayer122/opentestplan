import { createRouter } from 'next-connect';
import pool from '../../../lib/db';

const router = createRouter();

router
    .get(async (req, res) => {
        try {
            const result = await pool.query(`
        SELECT tr.id, tr.name, tr.version, 
          COUNT(CASE WHEN trs.status = 'complete' THEN trs.id END)::integer AS complete_count,
          COUNT(CASE WHEN trs.status = 'pending' THEN trs.id END)::integer AS pending_count,
          COUNT(CASE WHEN trs.status = 'failed' THEN trs.id END)::integer AS failed_count
        FROM test_runs AS tr
        JOIN test_run_steps AS trs ON tr.id = trs.test_run_id
        WHERE state = 'active'
        GROUP BY tr.id
      `);
            res.json(result.rows);
        } catch (err) {
            console.error(err.stack);
            res.status(500).json({ error: 'Failed to fetch data' });
        }
    });

export default router.handler({
    onError: (err, req, res) => {
        console.error(err.stack);
        res.status(500).json({ error: 'Something went wrong!' });
    },
    onNoMatch: (req, res) => {
        res.status(404).json({ error: 'Not Found' });
    }
});
