import { createRouter } from 'next-connect';
import pool from '../../../../lib/db';

const router = createRouter();

router
    .get(async (req, res) => {
        const { runId } = req.query;
        try {
            // Query to get total steps per user
            const totalQuery = `
            SELECT user_id, count(*) AS total
            FROM test_run_steps 
            WHERE test_run_id = $1
            GROUP BY user_id;
        `;

            // Query to get completed steps per user
            const completeQuery = `
            SELECT user_id, count(*) AS complete
            FROM test_run_steps 
            WHERE test_run_id = $1 AND status = 'complete'
            GROUP BY user_id;
        `;

            // Query to get failed steps per user
            const failedQuery = `
            SELECT user_id, count(*) AS failed
            FROM test_run_steps 
            WHERE test_run_id = $1 AND status = 'failed'
            GROUP BY user_id;
        `;

            const totals = await pool.query(totalQuery, [runId]);
            const completes = await pool.query(completeQuery, [runId]);
            const faileds = await pool.query(failedQuery, [runId]);

            const userTotals = totals.rows.reduce((acc, row) => {
                acc[row.user_id] = { total: parseInt(row.total), complete: 0, failed: 0 };
                return acc;
            }, {});

            completes.rows.forEach(row => {
                if (userTotals[row.user_id]) {
                    userTotals[row.user_id].complete = parseInt(row.complete);
                }
            });

            faileds.rows.forEach(row => {
                if (userTotals[row.user_id]) {
                    userTotals[row.user_id].failed = parseInt(row.failed);
                }
            });

            Object.keys(userTotals).forEach(userId => {
                const user = userTotals[userId];
                user.passedProgress = user.complete / user.total;
                user.failedProgress = user.failed / user.total;
            });

            const overallTotal = totals.rows.reduce((acc, row) => acc + parseInt(row.total), 0);
            const overallComplete = completes.rows.reduce((acc, row) => acc + parseInt(row.complete), 0);
            const overallFailed = faileds.rows.reduce((acc, row) => acc + parseInt(row.failed), 0);
            const overallPassedProgress = overallComplete / overallTotal;
            const overallFailedProgress = overallFailed / overallTotal;

            res.json({
                overall: {
                    total: overallTotal,
                    passedProgress: overallPassedProgress,
                    failedProgress: overallFailedProgress
                },
                byUser: userTotals
            });
        } catch (err) {
            console.error(err.stack);
            res.status(500).json({ error: 'Failed to fetch data' });
        }
    });


export default router.handler({
    onError: (err, req, res) => {
        console.error(err.stack);
        res.status(500).json({ error: 'Something went wrong!' });
    },
    onNoMatch: (req, res) => {
        res.status(404).json({ error: 'Not Found' });
    }
});
