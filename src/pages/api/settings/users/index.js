import { createRouter } from 'next-connect';
import pool from '../../../../lib/db';
const { adminAuthorization } = require('../../../../lib/middleware/authorization');

const bcrypt = require('bcrypt');
const saltRounds = 10;

const router = createRouter();

router
    .get(async (req, res) => {
        try {
            const authorized = await adminAuthorization(req, res);
            if (!authorized) {
                res.status(401).json({ error: 'Not Authorized' });
                return;
            }
            const query = `
          SELECT id, username, email, role, created_at FROM users where state = 'active' ORDER BY username ASC
        `;
            const result = await pool.query(query);
            res.json(result.rows);
        } catch (err) {
            console.error(err.stack);
            res.status(500).json({ error: 'Failed to fetch data' });
        }
    })
    .post(async (req,res) => {
        const { username, email, password } = req.body;
        const hashedPassword = await bcrypt.hash(password, saltRounds);
        try {
            const authorized = await adminAuthorization(req, res);
            if (!authorized) {
                res.status(401).json({ error: 'Not Authorized' });
                return;
            }
            const query = `
        INSERT INTO users (username, email, password) VALUES ($1, $2, $3)
        `;
            await pool.query(query, [username, email, hashedPassword]);
            res.json({ message: 'User created' });

        } catch (err) {
            console.error(err.stack);
            res.status(500).json({ error: 'Failed to create user'});
        }
    });

export default router.handler({
    onError: (err, req, res) => {
        console.error(err.stack);
        res.status(500).json({ error: 'Something went wrong!' });
    },
    onNoMatch: (req, res) => {
        res.status(404).json({ error: 'Not Found' });
    }
});
