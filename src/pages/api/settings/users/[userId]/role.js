import { createRouter } from 'next-connect';
import pool from '../../../../../lib/db';
const { adminAuthorization } = require('../../../../../lib/middleware/authorization');

const router = createRouter();

router
    .patch(async (req,res) => {
        const authorized = await adminAuthorization(req, res);
        if (!authorized) {
            res.status(401).json({ error: 'Not Authorized' });
            return;
        }
        const { userId } = req.query;
        const { role } = req.body;
        if (!role || !userId) {
            console.error('User ID and Role are required');
            res.status(500).json({ error: 'Failed to update user role'});
        }
        const allowedRoles = ['admin', 'standard'];
        if (!allowedRoles.includes(role)) {
            console.error(`Invalid Role used ${role}, allowed roles: ${allowedRoles}`);
            res.status(500).json({ error: 'Invalid role supplied' });
        }
        try {
            const query = `
        UPDATE users SET role = $1 WHERE id = $2
        `;
            await pool.query(query, [role, userId]);
            res.json({ message: 'User role updated' });
        } catch (err) {
            console.error(err.stack);
            res.status(500).json({ error: 'Failed to update user role'});
        }
    });

export default router.handler({
    onError: (err, req, res) => {
        console.error(err.stack);
        res.status(500).json({ error: 'Something went wrong!' });
    },
    onNoMatch: (req, res) => {
        res.status(404).json({ error: 'Not Found' });
    }
});
