import { createRouter } from 'next-connect';
import pool from '../../../../lib/db';

const router = createRouter();


router
    .get(async (req, res) => {
        const { planId } = req.query;
        try {
            const result = await pool.query(
                `SELECT t.id, t.name
                 FROM test_plan_tags tpt
                 JOIN tags t ON tpt.tag_id = t.id
                 WHERE tpt.test_plan_id = $1`,
                [planId]
            );
            res.json(result.rows);
            console.log(result);
        } catch (err) {
            console.error(err.stack);
            res.status(500).json({ error: 'Failed to fetch data' });
        }
    })

    .patch(async (req, res) => {
        const { tags } = req.body;
        const { planId } = req.query;

        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            await Promise.all(tags.map(async tag => {
                console.log(tag);
                await client.query(
                    `INSERT INTO tags (name)
               VALUES ($1)
               ON CONFLICT (name) DO NOTHING;`,
                    [tag.label]
                );
            })).catch(err => {
                console.error(err.stack);
                throw err;
            });

            await client.query(
                `DELETE FROM test_plan_tags
           WHERE test_plan_id = $1;`,
                [planId]
            );

            await Promise.all(tags.map(async tag => {
                console.log(tag.value);
                await client.query(
                    `INSERT INTO test_plan_tags (test_plan_id, tag_id) VALUES ($1, $2);`,
                    [planId, tag.value]
                );
            })).catch(err => {
                console.error(err.stack);
                throw err;
            });

            await client.query('COMMIT');
            client.release();
            res.status(200).json({ message: 'Test plan tags updated successfully' });
        } catch (err) {
            console.error(err.stack);
            await client.query('ROLLBACK');
            client.release();
            res.status(500).json({ error: 'Failed to update test plan tags' });
        }
    });

export default router.handler({
    onError: (err, req, res) => {
        console.error(err.stack);
        res.status(500).json({ error: 'Something went wrong!' });
    },
    onNoMatch: (req, res) => {
        res.status(404).json({ error: 'Not Found' });
    }
});
