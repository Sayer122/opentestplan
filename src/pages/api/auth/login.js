import { createRouter } from 'next-connect';
import pool from '../../../lib/db';
import jwtGenerator from '../../../lib/jwtGenerator';
import bcrypt from 'bcrypt';
import { serialize } from 'cookie';

const router = createRouter();

router
    .post(async (req, res) => {
        const { username, password } = req.body;

        if (!username || !password) {
            return res.status(400).json({ error: 'Username and password are required' });
        }
        try {
            const userQuery = await pool.query('SELECT * FROM users WHERE username = $1', [username]);

            if (userQuery.rows.length === 0) {
                return res.status(401).json({ error: 'Invalid Credentials' });
            }

            const user = userQuery.rows[0];
            if (!user) {
                return res.status(401).json({ error: 'Invalid Credential' });
            }
            const validPassword = await bcrypt.compare(password, user.password);

            if (!validPassword) {
                return res.status(401).json({ error: 'Invalid Credential' });
            }

            const jwtToken = jwtGenerator(user.id, user.role);
            const cookie = serialize('token', jwtToken, {
                httpOnly: true,
                secure: process.env.NODE_ENV === 'production',
                maxAge: 60 * 60 * 24,
                path: '/',
            });
            res.setHeader('Set-Cookie', cookie);
            res.status(200).json({ success: true });

        } catch (err) {
            console.error(err.message);
            res.status(500).json({ error: 'Server error' });
        }
    });

export default router.handler({
    onError: (err, req, res) => {
        console.error(err.stack);
        res.status(500).json({ error: 'Something went wrong!' });
    },
    onNoMatch: (req, res) => {
        res.status(404).json({ error: 'Not Found' });
    }
});
