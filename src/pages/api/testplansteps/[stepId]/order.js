import { createRouter } from 'next-connect';
import pool from '../../../../lib/db';

const router = createRouter();

router.patch(async (req, res) => {
    const steps = req.body.step_order;

    if (!Array.isArray(steps)) {
        return res.status(400).json({ error: "Invalid input: step_order must be an array." });
    }
    let client;
    try {
        client = await pool.connect();
        await client.query('BEGIN');

        for (const step of steps) {
            await client.query(
                'UPDATE test_steps SET step_order = $1 WHERE id = $2',
                [step.step_order, step.id]
            );
        }

        await client.query('COMMIT');
        client.release();
        res.status(200).json({ message: 'Test steps updated successfully' });

    } catch (err) {
        console.error(err.stack);
        await client.query('ROLLBACK');
        client.release();
        res.status(500).json({ error: 'Failed to update test step orders' });
    }
});

export default router.handler({
    onError: (err, req, res) => {
        console.error(err.stack);
        res.status(500).json({ error: 'Something went wrong!' });
    },
    onNoMatch: (req, res) => {
        res.status(404).json({ error: 'Not Found' });
    }
});
