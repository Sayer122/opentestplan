import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import table from '../../styles/Table.module.css';
import form from '../../styles/Form.module.css';
import Header from '../../components/Header';
import Select from 'react-select';

function ManageTestPlansPage() {
    const [testRuns, setTestRuns] = useState([]);
    const [tagOptions, setTagOptions] = useState([]);
    const [name, setName] = useState('');
    const [version, setVersion] = useState('');
    const [hoveredRow, setHoveredRow] = useState(null);
    const [selectedTags, setSelectedTags] = useState([]);
    const [targetUrl, setTargetUrl] = useState('');
    const [users, setUsers] = useState([]);
    const [selectedUsers, setSelectedUsers] = useState([]);
    const router = useRouter();

    useEffect(() => {
        fetch('/api/testruns', {
            credentials: 'include'
        })
            .then(response => response.json())
            .then(data => setTestRuns(data));
        fetch('/api/tags', {
            credentials: 'include'
        })
            .then(response => response.json())
            .then(data => {
                const options = data.map(tag => ({ value: tag.id, label: tag.name }));
                setTagOptions(options);
            })
            .catch(error => console.error('Failed to fetch tags:', error));
        fetch('api/users', {
            credentials: 'include'
        })
            .then(response => response.json())
            .then(data => {
                const userOptions = data.map(user => ({ value: user.id, label: user.username }));
                setUsers(userOptions);
            })
            .catch(error => console.error('Failed to fetch users:', error));
    }, []);

    const handleSubmit = async (event) => {
        event.preventDefault();
        const selectedUserIds = selectedUsers.map(user => user.value);
        console.log(selectedUserIds);
        const res = await fetch('/api/testruns', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ name, version, tags: selectedTags, target_url: targetUrl, user_ids: selectedUserIds}),
        });
        if (res.ok) {
            const newRun = await res.json();
            setTestRuns([...testRuns, newRun]);
            setName('');
            setVersion('');
        } else {
            alert('Failed to create test run');
        }
    };
    const handleDelete = async (runId) => {
        const res = await fetch(`/api/testruns/${runId}`, {
            method: 'DELETE',
            credentials: 'include'
        });
        if (res.ok) {
            setTestRuns(testRuns.filter((run) => run.id !== runId));
        } else {
            alert('Failed to delete test run');
        }
    };

    const handleRowClick = (planId) => {
        router.push(`/testruns/${planId}`);
    };

    return (
        <>
            <Header/>
            <div style={{ marginLeft: '20px', marginRight: '20px', color: 'grey'  }}>

                <h2 className={form.formHeader}>Create New Test Run</h2>
                <div className={form.form}>
                    <form onSubmit={handleSubmit}>
                        <input
                            type="text"
                            value={name}
                            onChange={(e) => setName(e.target.value)}
                            placeholder="Name of test run"
                            className={form.input}
                            required={true}
                        />
                        <input
                            type="text"
                            value={version}
                            onChange={(e) => setVersion(e.target.value)}
                            placeholder="Version"
                            className={form.input}
                            required={true}
                        />
                        <input
                            type="text"
                            value={targetUrl}
                            onChange={(e) => setTargetUrl(e.target.value)}
                            placeholder="URL"
                            className={form.input}
                            required={true}
                        />
                        <Select
                            isMulti
                            name="tags"
                            options={tagOptions}
                            className="basic-multi-select"
                            classNamePrefix="select"
                            value={selectedTags}
                            onChange={setSelectedTags}
                            placeholder="Select Tags"
                        />
                        <Select
                            isMulti
                            name="users"
                            options={users}
                            className="basic-multi-select"
                            classNamePrefix="select"
                            value={selectedUsers}
                            onChange={setSelectedUsers}
                            placeholder="Select Users"
                        />
                        <button type="submit" className={form.button}>
                        Submit
                        </button>
                    </form>
                </div>
            </div>

            <table className={table.table}>
                <thead>
                    <tr>
                        <th className={table.th}>Name</th>
                        <th className={table.th}>Version</th>
                        <th className={table.th}>Date</th>
                        <th className={table.th}>Progress</th>
                        <th className={table.th}>Delete</th>
                    </tr>
                </thead>
                <tbody>
                    {testRuns.map((run) => (
                        <tr
                            key={run.id}
                            onClick={() => handleRowClick(run.id)}
                            onMouseEnter={() => setHoveredRow(run.id)}
                            onMouseLeave={() => setHoveredRow(null)}
                            className={hoveredRow === run.id ? table.hovered : ''}
                        >
                            <td className={table.td}>{run.name}</td>
                            <td className={table.td}>{run.version}</td>
                            <td className={table.td}>{new Date(run.created_at).toLocaleDateString()}</td>
                            <td className={table.td}>{(run.progress*100).toFixed(0)}%</td>
                            <td className={table.td}>
                                <button onClick={(e) => {
                                    e.stopPropagation();
                                    handleDelete(run.id);
                                }} className={table.button}>
                                    <i className="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </>
    );
}

export default ManageTestPlansPage;
