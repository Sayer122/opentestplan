\c opentestplan;

CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    username VARCHAR(255) UNIQUE NOT NULL,
    email VARCHAR(255) NOT NULL,
    password TEXT NOT NULL,
    role VARCHAR(255) NOT NULL DEFAULT 'standard',
    state VARCHAR(255) NOT NULL DEFAULT 'active'
);

CREATE TABLE IF NOT EXISTS test_runs (
    id SERIAL PRIMARY KEY,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    name VARCHAR(255) NOT NULL,
    version VARCHAR(255) NOT NULL,
    target_url TEXT,
    state VARCHAR(255) NOT NULL DEFAULT 'active'
);

CREATE TABLE IF NOT EXISTS test_plans (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS test_steps (
    id SERIAL PRIMARY KEY,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    plan_id INTEGER NOT NULL,
    description TEXT NOT NULL,
    expected_result TEXT,
    actual_result TEXT,
    status VARCHAR(255),
    step_order INTEGER NOT NULL,
    FOREIGN KEY (plan_id) REFERENCES test_plans(id)
);
CREATE TABLE IF NOT EXISTS test_run_steps (
    id SERIAL PRIMARY KEY,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    test_run_id INTEGER NOT NULL REFERENCES test_runs(id),
    test_plan_id INTEGER NOT NULL REFERENCES test_plans(id),
    test_step_id INTEGER NOT NULL REFERENCES test_steps(id),
    user_id INTEGER NOT NULL REFERENCES users(id),
    comments TEXT,
    status VARCHAR(255),
    ticket VARCHAR(255)
);

CREATE TRIGGER update_test_run_steps_updated_at
BEFORE UPDATE ON test_run_steps
FOR EACH ROW
EXECUTE FUNCTION update_updated_at();

CREATE TABLE IF NOT EXISTS tags (
    id SERIAL PRIMARY KEY,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    name VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS test_plan_tags (
    id SERIAL PRIMARY KEY,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    test_plan_id INT NOT NULL,
    tag_id INT NOT NULL,
    FOREIGN KEY (test_plan_id) REFERENCES test_plans (id) ON DELETE CASCADE,
    FOREIGN KEY (tag_id) REFERENCES tags (id) ON DELETE CASCADE,
    UNIQUE (test_plan_id, tag_id)
);

